using System.Diagnostics.CodeAnalysis;
using System.Reflection;

using BepInEx.Configuration;

using Cat;

using HarmonyLib;

using UnityEngine;

namespace CalApi.DebugMode;

internal class DebugInvulnerability : IDebug {
    private const string SectionName = "Debug: Invulnerability";

    private readonly DebugMain _main;
    private readonly ConfigEntry<bool> _invulnerability;
    private readonly ConfigEntry<bool> _fullInvulnerability;
    private readonly ConfigEntry<bool> _lavaWalk;

    [SuppressMessage("ReSharper", "HeapView.ObjectAllocation")]
    public DebugInvulnerability(ConfigFile config, DebugMain main) {
        _main = main;
        _invulnerability = config.Bind(SectionName, "Invulnerability", false,
            new ConfigDescription("", null, new ConfigurationManagerAttributes { IsAdvanced = true }));
        _fullInvulnerability = config.Bind(SectionName, "Full Invulnerability", false,
            new ConfigDescription("", null, new ConfigurationManagerAttributes { IsAdvanced = true }));
        _lavaWalk = config.Bind(SectionName, "Jesus Mode", false,
            new ConfigDescription("Walk on lava Pog", null, new ConfigurationManagerAttributes { IsAdvanced = true }));
    }

    public void Load() {
        _invulnerability.SettingChanged += (_, _) => UpdateInvulnerability();
        _fullInvulnerability.SettingChanged += (_, _) => UpdateInvulnerability();
        _lavaWalk.SettingChanged += (_, _) => UpdateLavaWalk();
        UpdateLavaWalk();
    }

    public void SettingsChanged() {
        UpdateInvulnerability();
        UpdateLavaWalk();
    }

    public void CatControlsAwake() => UpdateInvulnerability();
    public void CatControlsInputCheck(CatControls controls) { }
    public void CatControlsMove(CatControls controls) { }
    public void Update() { }

    private static readonly FieldInfo catHealth = AccessTools.Field(typeof(Cat.CatControls), "catHealth");
    private static readonly FieldInfo invulnerable = AccessTools.Field(catHealth.FieldType, "invulnerable");
    private static readonly FieldInfo dying = AccessTools.Field(catHealth.FieldType, "dying");
    [SuppressMessage("ReSharper", "HeapView.BoxingAllocation")]
    private void UpdateInvulnerability() {
        // ReSharper disable once ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator
        foreach(GameObject cat in _main.playerCats) {
            Cat.CatControls controls = cat.GetComponent<Cat.CatControls>();
            object health = catHealth.GetValue(controls);
            invulnerable.SetValue(health, _main.enabled && _invulnerability.Value);
            dying.SetValue(health, _main.enabled && _fullInvulnerability.Value);
        }
    }

    private void UpdateLavaWalk() {
        int companion = LayerMask.NameToLayer("Companion Collider");
        bool ignore = !_main.enabled || !_lavaWalk.Value;
        Physics2D.IgnoreLayerCollision(LayerMask.NameToLayer("Cat"), companion, ignore);
        Physics2D.IgnoreLayerCollision(LayerMask.NameToLayer("Liquid Cat"), companion, ignore);
        Physics2D.IgnoreLayerCollision(LayerMask.NameToLayer("Floating Cat"), companion, ignore);
    }
}
